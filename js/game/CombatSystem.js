import { Projectile } from './Projectile.js';
import { CELL_TYPES } from './Grid.js';

export class CombatSystem {
    constructor(gameManager) {
        this.gameManager = gameManager;
        this.grid = gameManager.grid;
        this.renderer = gameManager.renderer;
        
        // Liste des projectiles actifs
        this.projectiles = [];
        
        // Configuration du combat
        this.config = {
            cannonRange: 12, // Port√©e des canons en cases
            cannonCooldown: 2000, // Temps entre tirs (ms)
            wallDestruction: true, // Les murs peuvent √™tre d√©truits
            friendlyFire: true, // Tir ami activ√©
            explosionRadius: 1.5, // Rayon d'explosion en cases
            maxProjectiles: 50 // Limite de projectiles simultan√©s
        };
        
        // √âtat des canons (cooldowns)
        this.cannonCooldowns = new Map();
        
        // Interface de vis√©e
        this.aimingMode = false;
        this.selectedCannon = null;
        this.crosshairPos = { x: 0, y: 0 };
        
        console.log('‚öîÔ∏è CombatSystem initialis√©');
    }

    /**
     * Activer le mode de vis√©e pour un canon
     */
    startAiming(cannonX, cannonY, playerId) {
        const cannon = this.findCannonAt(cannonX, cannonY, playerId);
        if (!cannon) {
            console.log(`‚ùå Aucun canon trouv√© √† (${cannonX}, ${cannonY})`);
            return false;
        }

        if (this.isCannonOnCooldown(cannon)) {
            console.log(`‚è∞ Canon en rechargement`);
            return false;
        }

        this.aimingMode = true;
        this.selectedCannon = cannon;
        console.log(`üéØ Mode vis√©e activ√© pour canon √† (${cannonX}, ${cannonY})`);
        return true;
    }

    /**
     * Arr√™ter le mode de vis√©e
     */
    stopAiming() {
        this.aimingMode = false;
        this.selectedCannon = null;
        console.log('üéØ Mode vis√©e d√©sactiv√©');
    }

    /**
     * Mettre √† jour la position du curseur de vis√©e
     */
    updateCrosshair(gridX, gridY) {
        if (!this.aimingMode || !this.selectedCannon) return;
        
        this.crosshairPos.x = gridX;
        this.crosshairPos.y = gridY;
    }

    /**
     * Tirer avec le canon s√©lectionn√© vers la position du curseur
     */
    fire() {
        if (!this.aimingMode || !this.selectedCannon) return false;

        const cannon = this.selectedCannon;
        const targetX = this.crosshairPos.x;
        const targetY = this.crosshairPos.y;

        // V√©rifier la port√©e
        const distance = this.getDistance(cannon.x + 1, cannon.y + 1, targetX, targetY);
        if (distance > this.config.cannonRange) {
            console.log(`‚ùå Cible hors de port√©e (${distance.toFixed(1)} > ${this.config.cannonRange})`);
            return false;
        }

        // Cr√©er le projectile
        const projectile = new Projectile(
            cannon.x + 1, cannon.y + 1, // Centre du canon 2x2
            targetX, targetY,
            {
                speed: 15,
                damage: 2,
                type: 'cannonball',
                color: '#ff6b35'
            }
        );

        // Configurer l'impact
        projectile.onImpact = (x, y) => this.handleProjectileImpact(projectile, x, y);

        this.projectiles.push(projectile);
        
        // Mettre le canon en cooldown
        this.setCannonCooldown(cannon);
        
        // Animation de tir
        cannon.firing = true;
        setTimeout(() => { cannon.firing = false; }, 200);
        
        // Arr√™ter la vis√©e apr√®s le tir
        this.stopAiming();
        
        console.log(`üí• Tir depuis (${cannon.x}, ${cannon.y}) vers (${targetX}, ${targetY})`);
        return true;
    }

    /**
     * G√©rer l'impact d'un projectile
     */
    handleProjectileImpact(projectile, x, y) {
        const gridX = Math.floor(x);
        const gridY = Math.floor(y);
        
        // Effet d'explosion
        this.createExplosion(gridX, gridY, projectile.damage);
        
        // D√©g√¢ts dans le rayon d'explosion
        this.applyExplosionDamage(gridX, gridY, this.config.explosionRadius, projectile.damage);
        
        // Effet visuel
        if (this.renderer) {
            this.renderer.addExplosion(gridX, gridY);
        }
    }

    /**
     * Appliquer les d√©g√¢ts d'explosion dans un rayon
     */
    applyExplosionDamage(centerX, centerY, radius, damage) {
        const startX = Math.floor(centerX - radius);
        const endX = Math.ceil(centerX + radius);
        const startY = Math.floor(centerY - radius);
        const endY = Math.ceil(centerY + radius);

        for (let x = startX; x <= endX; x++) {
            for (let y = startY; y <= endY; y++) {
                if (!this.grid.isValidPosition(x, y)) continue;

                const distance = this.getDistance(centerX, centerY, x, y);
                if (distance > radius) continue;

                // Calculer les d√©g√¢ts selon la distance (plus faible en p√©riph√©rie)
                const damageRatio = 1 - (distance / radius);
                const actualDamage = Math.ceil(damage * damageRatio);

                this.damageCellAt(x, y, actualDamage);
            }
        }
    }

    /**
     * Endommager une cellule sp√©cifique
     */
    damageCellAt(x, y, damage) {
        const cell = this.grid.getCell(x, y);
        if (!cell) return;

        // V√©rifier si la cellule peut √™tre endommag√©e
        if (!cell.isDestructible()) return;

        console.log(`üí• D√©g√¢ts ${damage} √† (${x}, ${y}) - Type: ${cell.type}`);

        // Appliquer les d√©g√¢ts
        const destroyed = cell.takeDamage(damage);
        
        if (destroyed) {
            console.log(`üí• ${cell.type} d√©truit √† (${x}, ${y})`);
            
            // Traitement sp√©ciaux selon le type
            switch (cell.type) {
                case CELL_TYPES.CANNON:
                    this.onCannonDestroyed(x, y);
                    break;
                case CELL_TYPES.CASTLE_CORE:
                    this.onCastleCoreDestroyed(x, y);
                    break;
                case CELL_TYPES.WALL:
                    this.onWallDestroyed(x, y);
                    break;
            }
        }
    }

    /**
     * √âv√©nement : canon d√©truit
     */
    onCannonDestroyed(x, y) {
        // Trouver le joueur qui poss√©dait ce canon
        const players = this.gameManager.players;
        for (let player of players) {
            for (let i = player.cannons.length - 1; i >= 0; i--) {
                const cannon = player.cannons[i];
                if (x >= cannon.x && x < cannon.x + 2 && 
                    y >= cannon.y && y < cannon.y + 2) {
                    
                    player.cannons.splice(i, 1);
                    console.log(`üéØ Canon du joueur ${player.id} d√©truit`);
                    break;
                }
            }
        }
    }

    /**
     * √âv√©nement : c≈ìur de ch√¢teau d√©truit
     */
    onCastleCoreDestroyed(x, y) {
        // Trouver le joueur propri√©taire
        const players = this.gameManager.players;
        for (let player of players) {
            if (player.castle.core && 
                player.castle.core.x === x && 
                player.castle.core.y === y) {
                
                console.log(`üëë Ch√¢teau du joueur ${player.id} d√©truit !`);
                player.castle.destroyed = true;
                
                // Logique de d√©faite du joueur
                this.onPlayerDefeated(player);
                break;
            }
        }
    }

    /**
     * √âv√©nement : mur d√©truit
     */
    onWallDestroyed(x, y) {
        // V√©rifier si cela brise la fermeture du ch√¢teau
        // (sera impl√©ment√© plus tard avec la d√©tection de ch√¢teau)
        console.log(`üß± Mur d√©truit √† (${x}, ${y})`);
    }

    /**
     * √âv√©nement : joueur d√©fait
     */
    onPlayerDefeated(player) {
        player.isDefeated = true;
        console.log(`üíÄ Joueur ${player.id} √©limin√© !`);
        
        // V√©rifier la condition de victoire
        this.checkVictoryCondition();
    }

    /**
     * V√©rifier les conditions de victoire
     */
    checkVictoryCondition() {
        const alivePlayers = this.gameManager.players.filter(p => !p.isDefeated);
        
        if (alivePlayers.length <= 1) {
            const winner = alivePlayers[0];
            console.log(`üèÜ Victoire du joueur ${winner ? winner.id : 'aucun'} !`);
            this.gameManager.onGameEnd(winner);
        }
    }

    /**
     * Cr√©er un effet d'explosion visuel
     */
    createExplosion(x, y, intensity = 1) {
        // Animation d'explosion (sera utilis√©e par le renderer)
        const explosion = {
            x: x,
            y: y,
            intensity: intensity,
            startTime: Date.now(),
            duration: 800
        };
        
        console.log(`üí• Explosion cr√©√©e √† (${x}, ${y}) intensit√© ${intensity}`);
        return explosion;
    }

    /**
     * Mettre √† jour tous les projectiles
     */
    update(deltaTime) {
        // Mettre √† jour les projectiles
        for (let i = this.projectiles.length - 1; i >= 0; i--) {
            const projectile = this.projectiles[i];
            
            projectile.update(deltaTime);
            
            // Supprimer les projectiles inactifs
            if (!projectile.active) {
                this.projectiles.splice(i, 1);
            }
        }
        
        // Nettoyer les cooldowns expir√©s
        this.updateCannonCooldowns();
    }

    /**
     * Rendre tous les √©l√©ments du combat
     */
    render(ctx, renderer) {
        // Rendre les projectiles
        this.projectiles.forEach(projectile => {
            projectile.render(ctx, renderer);
        });
        
        // Rendre l'interface de vis√©e
        if (this.aimingMode && this.selectedCannon) {
            this.renderAimingInterface(ctx, renderer);
        }
    }

    /**
     * Rendre l'interface de vis√©e
     */
    renderAimingInterface(ctx, renderer) {
        const cannon = this.selectedCannon;
        const cannonScreenPos = renderer.gridToScreen(cannon.x + 1, cannon.y + 1);
        const crosshairScreenPos = renderer.gridToScreen(this.crosshairPos.x, this.crosshairPos.y);
        
        // Ligne de vis√©e
        const distance = this.getDistance(cannon.x + 1, cannon.y + 1, this.crosshairPos.x, this.crosshairPos.y);
        const inRange = distance <= this.config.cannonRange;
        
        ctx.strokeStyle = inRange ? '#00ff00' : '#ff0000';
        ctx.lineWidth = 2;
        ctx.setLineDash([5, 5]);
        ctx.beginPath();
        ctx.moveTo(cannonScreenPos.x, cannonScreenPos.y);
        ctx.lineTo(crosshairScreenPos.x, crosshairScreenPos.y);
        ctx.stroke();
        ctx.setLineDash([]);
        
        // Curseur de vis√©e
        ctx.strokeStyle = inRange ? '#00ff00' : '#ff0000';
        ctx.lineWidth = 3;
        ctx.beginPath();
        ctx.arc(crosshairScreenPos.x, crosshairScreenPos.y, 12, 0, Math.PI * 2);
        ctx.stroke();
        
        // Croix de vis√©e
        ctx.beginPath();
        ctx.moveTo(crosshairScreenPos.x - 8, crosshairScreenPos.y);
        ctx.lineTo(crosshairScreenPos.x + 8, crosshairScreenPos.y);
        ctx.moveTo(crosshairScreenPos.x, crosshairScreenPos.y - 8);
        ctx.lineTo(crosshairScreenPos.x, crosshairScreenPos.y + 8);
        ctx.stroke();
        
        // Informations de port√©e
        ctx.fillStyle = '#ffffff';
        ctx.font = '12px Arial';
        ctx.fillText(`Distance: ${distance.toFixed(1)}/${this.config.cannonRange}`, 
                    crosshairScreenPos.x + 15, crosshairScreenPos.y - 15);
    }

    // M√©thodes utilitaires
    
    getDistance(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
    }

    findCannonAt(x, y, playerId) {
        const players = this.gameManager.players;
        for (let player of players) {
            if (playerId && player.id !== playerId) continue;
            
            for (let cannon of player.cannons) {
                if (x >= cannon.x && x < cannon.x + 2 && 
                    y >= cannon.y && y < cannon.y + 2) {
                    return cannon;
                }
            }
        }
        return null;
    }

    isCannonOnCooldown(cannon) {
        const key = `${cannon.x}-${cannon.y}`;
        const cooldownEnd = this.cannonCooldowns.get(key);
        return cooldownEnd && Date.now() < cooldownEnd;
    }

    setCannonCooldown(cannon) {
        const key = `${cannon.x}-${cannon.y}`;
        this.cannonCooldowns.set(key, Date.now() + this.config.cannonCooldown);
    }

    updateCannonCooldowns() {
        const now = Date.now();
        for (let [key, cooldownEnd] of this.cannonCooldowns.entries()) {
            if (now >= cooldownEnd) {
                this.cannonCooldowns.delete(key);
            }
        }
    }

    // Interface publique pour GameManager

    handleCannonClick(gridX, gridY, playerId) {
        if (this.aimingMode) {
            // En mode vis√©e, cliquer tire
            this.updateCrosshair(gridX, gridY);
            return this.fire();
        } else {
            // Pas en mode vis√©e, s√©lectionner le canon
            return this.startAiming(gridX, gridY, playerId);
        }
    }

    handleRightClick() {
        if (this.aimingMode) {
            this.stopAiming();
            return true;
        }
        return false;
    }

    handleMouseMove(gridX, gridY) {
        if (this.aimingMode) {
            this.updateCrosshair(gridX, gridY);
        }
    }

    // Nettoyage
    destroy() {
        this.projectiles.length = 0;
        this.cannonCooldowns.clear();
        this.stopAiming();
        console.log('‚öîÔ∏è CombatSystem d√©truit');
    }
}